import React, { useEffect, useRef } from 'react';
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

/**
 * Ultra-simple Three.js test to verify rendering works
 */
const SimpleTestApp = () => {
  const mountRef = useRef(null);

  useEffect(() => {
    if (!mountRef.current) return;

    console.log('ðŸ”§ Initializing Simple Test Scene...');

    // Create scene
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x222222); // Dark gray

    // Create camera
    const camera = new THREE.PerspectiveCamera(
      75,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    camera.position.set(0, 10, 20);
    camera.lookAt(0, 0, 0);

    // Create renderer
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    mountRef.current.appendChild(renderer.domElement);

    // Add orbit controls
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;

    // Add lights
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(10, 10, 10);
    scene.add(directionalLight);

    // Create a simple ground plane
    const groundGeometry = new THREE.PlaneGeometry(50, 50);
    const groundMaterial = new THREE.MeshStandardMaterial({ color: 0x3a5a3a });
    const ground = new THREE.Mesh(groundGeometry, groundMaterial);
    ground.rotation.x = -Math.PI / 2;
    scene.add(ground);

    // Create some colorful cubes to see
    const colors = [0xff0000, 0x00ff00, 0x0000ff, 0xffff00, 0xff00ff];
    for (let i = 0; i < 5; i++) {
      const geometry = new THREE.BoxGeometry(2, 2, 2);
      const material = new THREE.MeshStandardMaterial({ color: colors[i] });
      const cube = new THREE.Mesh(geometry, material);
      cube.position.set((i - 2) * 5, 1, 0);
      scene.add(cube);
      console.log(`âœ… Added cube ${i} at position (${cube.position.x}, ${cube.position.y}, ${cube.position.z})`);
    }

    // Create some spheres (agents)
    for (let i = 0; i < 10; i++) {
      const geometry = new THREE.SphereGeometry(0.5, 16, 16);
      const material = new THREE.MeshStandardMaterial({ 
        color: Math.random() * 0xffffff 
      });
      const sphere = new THREE.Mesh(geometry, material);
      sphere.position.set(
        (Math.random() - 0.5) * 20,
        0.5,
        (Math.random() - 0.5) * 20
      );
      scene.add(sphere);
    }

    console.log(`âœ… Scene setup complete. Objects in scene: ${scene.children.length}`);

    // Animation loop
    const animate = () => {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    };
    animate();

    // Handle resize
    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };
    window.addEventListener('resize', handleResize);

    console.log('ðŸš€ Simple Test Scene Running!');
    console.log('- You should see:');
    console.log('  â€¢ Gray background');
    console.log('  â€¢ Green ground plane');
    console.log('  â€¢ 5 colorful cubes in a row');
    console.log('  â€¢ 10 random colored spheres');
    console.log('- Controls: Left mouse to rotate, scroll to zoom');

    return () => {
      window.removeEventListener('resize', handleResize);
      controls.dispose();
      renderer.dispose();
      if (mountRef.current && renderer.domElement) {
        mountRef.current.removeChild(renderer.domElement);
      }
    };
  }, []);

  return (
    <div style={{ width: '100vw', height: '100vh', overflow: 'hidden', position: 'relative' }}>
      <div ref={mountRef} style={{ width: '100%', height: '100%' }} />
      <div style={{
        position: 'absolute',
        top: '20px',
        left: '20px',
        background: 'rgba(0,0,0,0.8)',
        color: 'white',
        padding: '15px',
        borderRadius: '8px',
        fontFamily: 'monospace',
        fontSize: '14px'
      }}>
        <h3 style={{ margin: '0 0 10px 0', color: '#4CAF50' }}>ðŸ”§ Simple Test Scene</h3>
        <div>If you see this text but no 3D scene:</div>
        <div style={{ marginTop: '5px', paddingLeft: '10px' }}>
          <div>1. Open browser console (F12)</div>
          <div>2. Check for errors</div>
          <div>3. Look for green "Scene Running" message</div>
        </div>
        <div style={{ marginTop: '10px', padding: '10px', background: 'rgba(76,175,80,0.2)', borderRadius: '4px' }}>
          <strong>Expected:</strong> Green ground + colored cubes + spheres
        </div>
      </div>
    </div>
  );
};

export default SimpleTestApp;
