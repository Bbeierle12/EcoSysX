# GitHub Actions CI/CD Configuration for EcoSysX Tests
# 
# This workflow runs tests on push and pull requests
# Place this file at: .github/workflows/test.yml

name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # JavaScript/TypeScript Tests (Vitest)
  vitest:
    name: Vitest (JavaScript/TypeScript)
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm run test:run
      
      - name: Generate coverage
        run: npm run test:coverage
        if: matrix.node-version == '20.x'
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20.x'
        with:
          files: ./coverage/coverage-final.json
          flags: vitest
          name: vitest-coverage
      
      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vitest-results-${{ matrix.node-version }}
          path: |
            coverage/
            test-results/

  # Qt C++ Tests
  qt-test:
    name: Qt Test (C++)
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        qt-version: ['6.9.3']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt-version }}
          modules: 'qtcharts qtnetwork'
      
      - name: Configure CMake (Unix)
        if: runner.os != 'Windows'
        working-directory: qt-gui
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON
      
      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        working-directory: qt-gui
        run: |
          mkdir build
          cd build
          cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON
      
      - name: Build
        working-directory: qt-gui/build
        run: cmake --build . --config Release
      
      - name: Run tests
        working-directory: qt-gui/build
        run: ctest --output-on-failure --build-config Release
      
      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: qt-test-results-${{ matrix.os }}
          path: qt-gui/build/Testing/

  # Combined Test Report
  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [vitest, qt-test]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Display structure
        run: ls -R
      
      - name: Generate summary
        run: |
          echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Vitest Results" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js 18.x: ${{ needs.vitest.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js 20.x: ${{ needs.vitest.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Qt Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Ubuntu: ${{ needs.qt-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Windows: ${{ needs.qt-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- macOS: ${{ needs.qt-test.result }}" >> $GITHUB_STEP_SUMMARY

  # Lint and Type Check
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
        continue-on-error: true
      
      - name: Type check TypeScript
        run: npx tsc --noEmit
        continue-on-error: true
