name: Genesis Engine CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'packages/genx-engine/**'
      - 'services/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main]
    paths:
      - 'packages/genx-engine/**'
      - 'services/**'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/genx

jobs:
  # Build and test the TypeScript SDK
  sdk-build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'packages/genx-engine/package-lock.json'
      
      - name: Install dependencies
        working-directory: packages/genx-engine
        run: npm ci
      
      - name: Lint TypeScript
        working-directory: packages/genx-engine
        run: npm run lint
      
      - name: Build TypeScript
        working-directory: packages/genx-engine
        run: npm run build
      
      - name: Run unit tests
        working-directory: packages/genx-engine
        run: npm run test:ci
      
      - name: Extract version
        id: version
        working-directory: packages/genx-engine
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
      - name: Upload SDK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sdk-dist
          path: packages/genx-engine/dist/
          retention-days: 7
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: packages/genx-engine/coverage/
          retention-days: 7

  # Build sidecar Docker images
  build-sidecars:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        provider: [mesa, agents, mason]
        include:
          - provider: mesa
            dockerfile: services/mesa-sidecar/Dockerfile
            context: services/mesa-sidecar
          - provider: agents
            dockerfile: services/agents-sidecar/Dockerfile
            context: services/agents-sidecar
          - provider: mason
            dockerfile: services/mason-sidecar/Dockerfile
            context: services/mason-sidecar
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-${{ matrix.provider }}-sidecar
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push ${{ matrix.provider }} sidecar
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/${{ matrix.provider }}-sidecar.tar
      
      - name: Upload ${{ matrix.provider }} image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.provider }}-sidecar-image
          path: /tmp/${{ matrix.provider }}-sidecar.tar
          retention-days: 1

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-sidecars
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        provider: [mesa, agents, mason]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download ${{ matrix.provider }} image
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.provider }}-sidecar-image
          path: /tmp/
      
      - name: Load Docker image
        run: docker load --input /tmp/${{ matrix.provider }}-sidecar.tar
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_PREFIX }}-${{ matrix.provider }}-sidecar:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.provider }}.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.provider }}.sarif'

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [sdk-build, build-sidecars]
    strategy:
      matrix:
        provider: [mesa, agents, mason]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'packages/genx-engine/package-lock.json'
      
      - name: Download SDK artifacts
        uses: actions/download-artifact@v4
        with:
          name: sdk-dist
          path: packages/genx-engine/dist/
      
      - name: Download ${{ matrix.provider }} image
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.provider }}-sidecar-image
          path: /tmp/
      
      - name: Load Docker image
        run: docker load --input /tmp/${{ matrix.provider }}-sidecar.tar
      
      - name: Install test dependencies
        working-directory: packages/genx-engine
        run: npm ci
      
      - name: Run integration tests for ${{ matrix.provider }}
        working-directory: packages/genx-engine
        run: npm run test:integration -- --testNamePattern="${{ matrix.provider }}"
        env:
          PROVIDER_IMAGE: ${{ env.IMAGE_PREFIX }}-${{ matrix.provider }}-sidecar:latest
          TEST_TIMEOUT: 300000
        timeout-minutes: 10
      
      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.provider }}-test-failure
          path: |
            packages/genx-engine/test-results/
            packages/genx-engine/coverage/
          retention-days: 3

  # Determinism validation
  determinism-tests:
    runs-on: ubuntu-latest
    needs: [sdk-build, build-sidecars]
    strategy:
      matrix:
        provider: [mesa, agents, mason]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'packages/genx-engine/package-lock.json'
      
      - name: Download SDK artifacts
        uses: actions/download-artifact@v4
        with:
          name: sdk-dist
          path: packages/genx-engine/dist/
      
      - name: Download ${{ matrix.provider }} image
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.provider }}-sidecar-image
          path: /tmp/
      
      - name: Load Docker image
        run: docker load --input /tmp/${{ matrix.provider }}-sidecar.tar
      
      - name: Install test dependencies
        working-directory: packages/genx-engine
        run: npm ci
      
      - name: Run determinism tests for ${{ matrix.provider }}
        working-directory: packages/genx-engine
        run: npm run test:determinism -- --testNamePattern="${{ matrix.provider }}"
        env:
          PROVIDER_IMAGE: ${{ env.IMAGE_PREFIX }}-${{ matrix.provider }}-sidecar:latest
          TEST_TIMEOUT: 600000
        timeout-minutes: 15

  # Performance benchmarks
  performance-tests:
    runs-on: ubuntu-latest
    needs: [sdk-build, build-sidecars]
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        provider: [mesa, agents, mason]
        population: [100, 500, 1000]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'packages/genx-engine/package-lock.json'
      
      - name: Download SDK artifacts
        uses: actions/download-artifact@v4
        with:
          name: sdk-dist
          path: packages/genx-engine/dist/
      
      - name: Download ${{ matrix.provider }} image
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.provider }}-sidecar-image
          path: /tmp/
      
      - name: Load Docker image
        run: docker load --input /tmp/${{ matrix.provider }}-sidecar.tar
      
      - name: Install dependencies
        working-directory: packages/genx-engine
        run: npm ci
      
      - name: Run performance benchmark
        working-directory: packages/genx-engine
        run: npm run benchmark
        env:
          PROVIDER: ${{ matrix.provider }}
          POPULATION_SIZE: ${{ matrix.population }}
          PROVIDER_IMAGE: ${{ env.IMAGE_PREFIX }}-${{ matrix.provider }}-sidecar:latest
        timeout-minutes: 10
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-${{ matrix.provider }}-${{ matrix.population }}
          path: packages/genx-engine/benchmark-results.json
          retention-days: 30

  # Final validation
  validation-summary:
    runs-on: ubuntu-latest
    needs: [integration-tests, determinism-tests]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "## CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Determinism Tests | ${{ needs.determinism-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.integration-tests.result }}" = "success" ] && [ "${{ needs.determinism-tests.result }}" = "success" ]; then
            echo "✅ All core tests passed!"
            echo "🚀 Genesis Engine providers are ready for deployment"
          else
            echo "❌ Some tests failed - check individual job logs"
            exit 1
          fi

  # Publish release artifacts
  publish:
    runs-on: ubuntu-latest
    needs: [validation-summary, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'packages/genx-engine/package-lock.json'
      
      - name: Download SDK artifacts
        uses: actions/download-artifact@v4
        with:
          name: sdk-dist
          path: packages/genx-engine/dist/
      
      - name: Install dependencies
        working-directory: packages/genx-engine
        run: npm ci
      
      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.sdk-build.outputs.version }}-${{ github.sha }}
          release_name: Genesis Engine v${{ needs.sdk-build.outputs.version }}
          body: |
            ## Genesis Engine Release
            
            Multi-provider ecosystem simulation platform with deterministic execution.
            
            ### Providers Validated
            - ✅ Mesa (Python) - Agent-based modeling
            - ✅ Agents.jl (Julia) - High-performance simulation  
            - ✅ MASON (Java) - Continuous space modeling
            
            ### Docker Images
            - `ghcr.io/${{ github.repository_owner }}/genx-mesa-sidecar:latest`
            - `ghcr.io/${{ github.repository_owner }}/genx-agents-sidecar:latest`
            - `ghcr.io/${{ github.repository_owner }}/genx-mason-sidecar:latest`
            
            ### Changes
            Built from commit ${{ github.sha }}
          draft: false
          prerelease: false